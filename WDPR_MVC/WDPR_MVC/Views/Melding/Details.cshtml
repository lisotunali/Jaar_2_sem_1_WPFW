@model Melding

@using Microsoft.AspNetCore.Identity
@using WDPR_MVC.Areas.Identity.Data

@{
    ViewData["Title"] = $"Melding - {Model.Titel}";
	var closedClass = (Model.IsClosed) ? "meldingClosed" : "";
}

@inject UserManager<ApplicationUser> UserManager

<div id="alert"></div>

<article class="row">
	<section class="col-lg-12 mb-3">
		<div class="card mb-2 @closedClass">
			<div class="card-body">
				<div class="d-flex align-items-sm-center metadataUser flex-column flex-sm-row">
					<div class="d-flex align-items-center justify-content-center">
						<div class="userImage mr-3">
							<img src="https://via.placeholder.com/150" alt="Profiel foto">
						</div>

						<div class="userInfo">
							<p>@Model.Auteur.UserName</p>
							<time datetime="@(Model.DatumAangemaakt.ToString("yyyy-MM-dd HH:mm"))" class="text-muted">@Model.DatumAangemaakt.ToString("dd MMMM yyyy HH:mm")</time>
						</div>
					</div>

					<div class="d-flex justify-content-around ml-sm-auto mt-3 mt-sm-0 flex-grow-1">
						<div class="d-flex align-items-center likes">
							<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" fill="currentColor" class="bi bi-eye mr-2" viewBox="0 0 16 16">
								<title>Eye</title>
								<path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/>
								<path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
							</svg>
							<span>@Model.KeerBekeken</span>
						</div>

						<div class="d-flex align-items-center likes">
							<svg xmlns="http://www.w3.org/2000/svg" width="1.5em" height="1.5em" fill="currentColor" class="bi bi-chat mr-2" viewBox="0 0 16 16">
								<title>Speech balloon</title>
								<path d="M2.678 11.894a1 1 0 0 1 .287.801 10.97 10.97 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8.06 8.06 0 0 0 8 14c3.996 0 7-2.807 7-6 0-3.192-3.004-6-7-6S1 4.808 1 8c0 1.468.617 2.83 1.678 3.894zm-.493 3.905a21.682 21.682 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a9.68 9.68 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105z"/>
							</svg>
							<span>@Model.Comments.Count()</span>
						</div>

						<div role="button" class="likes d-flex align-items-center @(Model.Likes.Any(m => m.UserId == UserManager.GetUserId(User)) ? "liked" : "")" id="like" tabindex="0" aria-pressed="@(Model.Likes.Any(m => m.UserId == UserManager.GetUserId(User)) ? "true" : "false")">
							<svg width="1.5em" height="1.5em" viewBox="0 0 16 16" class="bi bi-heart mr-2"
								fill="currentColor" xmlns="http://www.w3.org/2000/svg">
								<title>Heart likes</title>
								<path fill-rule="evenodd"
									d="M8 2.748l-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z" />
							</svg>
							<span id="likesAmount">@Model.Likes.Count()</span>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="card @closedClass">
			<div class="card-body">
				<h1 class="card-title">@Model.Titel</h1>

				<p class="text-body" style="white-space: pre-wrap;">@Model.Beschrijving</p>

				@if (@Model.ImageName != null) {
					<img src="/images/@Model.ImageName" class="img-fluid rounded mx-auto d-block" alt="Een foto dat bij de melding hoort">
				}

				<footer class="d-flex justify-content-end mt-2">
					@if((await AuthorizationService.AuthorizeAsync(User, Model, MeldingOperations.Lock)).Succeeded) {
						<a asp-action="ToggleSluitMelding" asp-route-id="@Model.Id" class="card-link">
							<small class="text-muted">@(Model.IsClosed ? "Open" : "Sluit") melding</small>
						</a>
					}
					@if((await AuthorizationService.AuthorizeAsync(User, Model, MeldingOperations.Update)).Succeeded) {
						<a asp-action="Edit" asp-route-id="@Model.Id" class="card-link">
							<small class="text-muted">Bewerk melding</small>
						</a>
					} else {
						<a href="#" id="reportMelding" class="card-link">
							<small class="text-danger">Report melding</small>
						</a>
					}
				</footer>
			</div>
		</div>
	</section>

	<section class="col">
	@foreach (var comment in @Model.Comments)
	{
		<article>
			<div class="card mb-2">
				<header class="card-body border-bottom">
					<div class="d-flex align-items-center metadataUser">
						<div class="userImage mr-3">
							<img src="https://via.placeholder.com/150" alt="Profiel foto">
						</div>
						<div class="userInfo">
							<p>@comment.AuteurComment.UserName</p>
							<time datetime="@(comment.DatumAangemaakt.ToString("yyyy-MM-dd HH:mm"))" class="text-muted">@comment.DatumAangemaakt.ToString("dd MMMM yyyy HH:mm")</time>
						</div>
					</div>
				</header>

				<div class="card-body">
					<p class="text-body mb-0" style="white-space: pre-wrap;">@comment.Inhoud</p>

					<footer class="d-flex justify-content-end mt-2">
						@if(User.IsInRole("Mod")) {
							<a asp-controller="Comments" asp-action="Edit" asp-route-id="@comment.Id" class="card-link">
								<small class="text-muted">Bewerk</small>
							</a>
						}
					</footer>
					@*<footer>
						<a href="#" class="card-link float-right mt-2"><small class="text-muted">Report reactie</small></a>
					</footer>*@
				</div>
			</div>
		</article>
	}
	</section>
</article>

@{
	var disabled = Model.IsClosed ? "disabled" : "";
}

<div class="row mt-4">
    <div class="col-sm">
        <h2>Plaats een reactie</h2>
        <form asp-action="AddComment">
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
				<label for="comment" class="control-label sr-only">Plaats een reactie</label>
                <textarea class="form-control" rows="3" id="comment" name="comment" @disabled></textarea>
            </div>
            <button type="submit" class="btn btn-primary" @disabled>Post</button>
        </form>
    </div>
</div>

@section scripts {
<script>
    const like = document.getElementById("like");
    like.addEventListener("click", addLike);
    like.addEventListener("keydown", addLikeAccessibility);

    const melding = document.getElementById("reportMelding");
	if (melding != null) {
		melding.addEventListener("click", reportMelding);
		melding.addEventListener("keydown", reportMelding);
	}

    let isSending = false;

    function addLikeAccessibility(e) {
        // Only if enter or space pressed
        if (e.keyCode != 13 && e.keyCode != 32) return;

        addLike();
    }

    async function addLike() {
        // If there is already a request happening jump out
        if (isSending) return;
        isSending = true;

        const currentLikes = document.getElementById("likesAmount");

        // Add +1/-1 right now for instant feedback to the user
        currentLikes.innerHTML = Number(currentLikes.innerHTML) + ((like.classList.contains("liked")) ? -1 : 1);

        // Toggle liked class
        like.classList.toggle("liked");

        // Also toggle aria-pressed
        like.setAttribute("aria-pressed", !(like.getAttribute("aria-pressed") === "true"));

        // Do a POST request with the current 'melding' id
        const response = await fetch("@(Url.Action("AddLike", "Melding"))", {
            method: "POST",
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': document.getElementsByName("__RequestVerificationToken")[0].value
            },
            body: "id=@Model.Id"
        })
        const likes = await response.json();

        // Update again to the new amount that gets returned from the request
        currentLikes.innerHTML = likes;
        isSending = false;
    }

	async function reportMelding() {
		const response = await fetch("/Melding/Report/@Model.Id");
		const result = await response.text();
		document.getElementById("alert").innerHTML = `<div class="alert alert-danger" role="alert">${result}</div>`;
	}
</script>
}
